{
  "methods": {
    "cancel(boolean)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "mayInterruptIfRunning"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "cancel(boolean)"
    },
    "execute(Params...)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "params"
      ],
      "returnType": "android.os.AsyncTask\u003cParams,Progress,Result\u003e",
      "exceptions": [],
      "name": "execute(Params...)"
    },
    "executeOnExecutor(java.util.concurrent.Executor,Params...)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "executor",
        "params"
      ],
      "returnType": "android.os.AsyncTask\u003cParams,Progress,Result\u003e",
      "exceptions": [],
      "name": "executeOnExecutor(java.util.concurrent.Executor,Params...)"
    },
    "get()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "Result",
      "exceptions": [
        "java.lang.InterruptedException",
        "java.util.concurrent.ExecutionException"
      ],
      "name": "get()"
    },
    "get(long,java.util.concurrent.TimeUnit)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "timeout",
        "unit"
      ],
      "returnType": "Result",
      "exceptions": [
        "java.lang.InterruptedException",
        "java.util.concurrent.ExecutionException",
        "java.util.concurrent.TimeoutException"
      ],
      "name": "get(long,java.util.concurrent.TimeUnit)"
    },
    "getBridge()": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [],
      "returnType": "org.robolectric.shadows.ShadowAsyncTaskBridge\u003cParams,Progress,Result\u003e",
      "exceptions": [],
      "name": "getBridge()"
    },
    "getStatus()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "android.os.AsyncTask.Status",
      "exceptions": [],
      "name": "getStatus()"
    },
    "isCancelled()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isCancelled()"
    },
    "publishProgress(Progress...)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "documentation": "Enqueue a call to {@link AsyncTask#onProgressUpdate(Object[])} on UI looper (or run it immediately\nif the looper it is not paused).\n\n@param values The progress values to update the UI with.\n@see AsyncTask#publishProgress(Object[])",
      "params": [
        "values"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "publishProgress(Progress...)"
    }
  },
  "documentation": " Shadow for {@link android.os.AsyncTask}.\n",
  "name": "org.robolectric.shadows.ShadowAsyncTask"
}